let row;
let col;
let board;
let boardtf;
let mombunt;
let font,
  fontsize = 40;
let size = 40;
let move = 0;
let bomb;
let userClick;
let userinput;
let sub;
let gametime;
function setup() {
  noLoop(); 
  while (userinput != "easy" && userinput != "hard"){
    userinput = prompt("Do you want more mines (easy) or less mines (hard)?")
  }
  createCanvas(600, 600);
  frameRate(30)
  userClick = true;
  row = height / size;
  col = width / size;
  let xlocation = Math.floor(mouseX / 40); /// this how far left/right
  let ylocation = Math.floor(mouseY / 40); /// this is how far up and down
  clearboard();

  boardmine();
}


function boardmine() {
  sub = int(millis() / 1000)
  mine();
  /// checking mines

  for (let r = 0; r < row; r++) {
    for (let c = 0; c < col; c++) {
      if (board[r][c] !== -1) {
        board[r][c] = countAdjacentMines(r, c);
      }
    }
  }

  // check out the board
  for (let r = 0; r < row; r++) {
    let thisrow = "";
    for (let c = 0; c < col; c++) {
      if (board[r][c] < 0) {
        thisrow += board[r][c] + " ";
      } else {
        thisrow += " " + board[r][c] + " ";
      }
    }
    // console.log(thisrow);
  }
  function countAdjacentMines(r, c) {
    let count = 0;
    for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
        let x = c + j;
        let y = r + i;
        if (x >= 0 && x < col && y >= 0 && y < row && board[y][x] === -1) {
          count++;
        }
      }
    }
    return count;
  }
}

/// board sets up where the mines are and boardtf setups what has been clicked minecount should be created in the setup function.
/// when clicked x,y make that cell from a 0 to a 1 on boardtf to show that it has been clicked,

function draw() {
  background(0);
  for (let r = 0; r < row; r++) {
    for (var c = 0; c < col; c++) {
      rect(c * size, r * size, size, size);
    }
  }
}

function reveal0() {
  let zero_counter = 0;
  for (let r = 0; r < 16; r++) {
    for (let c = 0; c < 16; c++) {
      for (let i = -1; i <= 1; i++) {
        for (let j = -1; j <= 1; j++) {
          let x = c + j;
          let y = r + i;
          if (
            x >= 0 &&
            x < col &&
            y >= 0 &&
            y < row &&
            board[y][x] === 0 &&
            boardtf[r][c] == 1 &&
            boardtf[y][x] == 0
          ) {
            boardtf[y][x] = 1;
            // Draw the rectangle for the zero at y,x
            fill(125);
            rect(x * 40, y * 40, 40, 40);
            fill("black");
            text("0", floor(40 * x) + 13, floor(40 * y) + 30);
            zero_counter += 1;
          }
        }
      }
    }
  }
  if (zero_counter > 0) {
    reveal0();
  }
}

function clearboard() {
  board = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ]; ///bombs, -1 is bomb, 0 is nothing

  boardtf = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ];
}

function preload() {
  bomb = loadSound("explosion-42132.mp3");
  lose = loadSound("wah-wah-sad-trombone-6347.mp3");
}
function loseSequence() {
  fill(120, 0, 0);
  rect(0, 150, 600, 300);
  fill("black");
  text("You hit a mine, Game over!", 150, 300);
}

function endgame() {
  for (let r = 0; r < row; r++) {
    for (let c = 0; c < col; c++) {
      if (board[r][c] === -1) {
        fill(255, 0, 0);
        rect(c * size, r * size, size, size);
        textSize(30);
        fill("black");
        text("ðŸ’£", c * size + 5, r * size + 30);
      }
    }
  }
}

function gamestoppage(){
        gametime = ((int(millis()/1000)) - sub)
        }
function gm(){
  text("It took you " + gametime + " seconds",200, 350 )
}

function mousePressed() {
  if (!userClick) return;
  if (mouseButton === LEFT) {
    xlocation = Math.floor(mouseX / 40); /// this how far left/right
    ylocation = Math.floor(mouseY / 40); /// this is how far up and down
    fill(125);
    rect(xlocation * 40, ylocation * 40, 40, 40);
    textSize(30);
    fill("black");
    move += 1;

    if (move == 1) {
      // keep generating new boards until the click was a zero
      while (board[ylocation][xlocation] != 0) {
        clearboard();
        boardmine();
      }
    }
    if (board[ylocation][xlocation] == -1) {
      if (move != 1) {
        boardtf[ylocation][xlocation] = 1;
        text("ðŸ’£", xlocation * 40 + 5, ylocation * 40 + 30);
        bomb.play();
        lose.play();
        setTimeout(endgame, 1500);
        setTimeout(loseSequence, 4000);
        gamestoppage();
        setTimeout(gm, 4000);
        userClick = false;
        
      }
    }
    if (board[ylocation][xlocation] == 0) {
      boardtf[ylocation][xlocation] = 1;
      text("0", xlocation * 40 + 13, ylocation * 40 + 30);
      reveal0();
    }
    if (board[ylocation][xlocation] == 1) {
      boardtf[ylocation][xlocation] = 1;
      text("1", xlocation * 40 + 13, ylocation * 40 + 30);
    }
    if (board[ylocation][xlocation] == 2) {
      boardtf[ylocation][xlocation] = 1;
      text("2", xlocation * 40 + 13, ylocation * 40 + 30);
    }

    if (board[ylocation][xlocation] == 3) {
      boardtf[ylocation][xlocation] = 1;
      text("3", xlocation * 40 + 13, ylocation * 40 + 30);
    }
    if (board[ylocation][xlocation] == 4) {
      boardtf[ylocation][xlocation] = 1;
      text("4", xlocation * 40 + 13, ylocation * 40 + 30);
    }
    if (board[ylocation][xlocation] == 5) {
      boardtf[ylocation][xlocation] = 1;
      text("5", xlocation * 40 + 13, ylocation * 40 + 30);
    }
    if (board[ylocation][xlocation] == 6) {
      boardtf[ylocation][xlocation] = 1;
      text("6", xlocation * 40 + 13, ylocation * 40 + 30);
    }
    if (board[ylocation][xlocation] == 7) {
      boardtf[ylocation][xlocation] = 1;
      text("7", xlocation * 40 + 13, ylocation * 40 + 30);
    }
    if (board[ylocation][xlocation] == 8) {
      boardtf[ylocation][xlocation] = 1;
      text("8", xlocation * 40 + 13, ylocation * 40 + 30);
    }
  }
  if (mouseButton === RIGHT) {
    textSize(30);
    text(
      "ðŸš©",
      Math.floor(mouseX / 40) * 40 + 9,
      Math.floor(mouseY / 40) * 40 + 30
    );
  }
}

function mine() {
  if (userinput == "easy") {
    for (let x = 0; x < 25; x += 1) {
      board[Math.floor(random(0, 16))][Math.floor(random(0, 16))] = -1;
    }
  }
  if (userinput == "hard") {
    for (let x = 0; x < 45; x += 1) {
      board[Math.floor(random(0, 16))][Math.floor(random(0, 16))] = -1;
    }
  }
}
